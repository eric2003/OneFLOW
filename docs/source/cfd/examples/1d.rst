CFD Examples 1D
==================================

#. `CFD Julia: A Learning Module Structuring an Introductory Course on Computational Fluid Dynamics <https://www.mdpi.com/2311-5521/4/3/159/>`_
#. `Third-Order Improved Runge-Kutta Method for Solving Ordinary Differential Equation <https://www.researchgate.net/publication/257143364_Third-Order_Improved_Runge-Kutta_Method_for_Solving_Ordinary_Differential_Equation/>`_
#. `Runge Kutta methods <https://www.cfd-online.com/Wiki/Runge_Kutta_methods/>`_
#. `MATHEMATICA TUTORIAL for the First Course. Part III: Runge--Kutta 3. <https://www.cfm.brown.edu/people/dobrush/am33/Mathematica/ch3/RK3.html>`_
#. `Runge-Kutta Integrator Overview: All Purpose Numerical Integration of Differential Equations <https://www.youtube.com/watch?v=HOWJp8NV5xU/>`_
#. `Coding a Fourth-Order Runge-Kutta Integrator in Python and Matlab <https://www.youtube.com/watch?v=vNoFdtcPFdk/>`_


Runge-Kutta
--------------------------
Consider an ordinary differential equation of the form :math:`\cfrac{dy}{dx} = f(x, y)` with initial condition :math:`y(x_0) = y_0`. For this, we can define the formulas for Runge-Kutta methods as follows.

Third-order version1:

.. math::
  \begin{array}{l}
  k_1=f(x_{n},y_{n})\\
  k_2=f(x_{n}+\cfrac{1}{2}h,y_{n}+\cfrac{1}{2}hk_{1})\\
  k_3=f(x_{0}+h,y_{n}-hk_{1}+2hk_{2})\\
  y_{n+1}=y_{n}+\cfrac{1}{6}h(k_{1}+4k_{2}+k_{3})\\
  \end{array}
  
Third-order version2:

.. math::
  \begin{array}{l}
  k_1=f(x_{n},y_{n})\\
  k_2=f(x_{n}+\cfrac{1}{3}h,y_{n}+\cfrac{1}{3}hk_{1})\\
  k_3=f(x_{n}+\cfrac{2}{3}h,y_{n}+\cfrac{2}{3}hk_{2})\\
  y_{n+1}=y_{n}+\cfrac{1}{4}h(k_{1}+3k_{3})\\
  \end{array}
  
Third-order version3: (Ralston formula)

.. math::
  \begin{array}{l}
  k_1=f(x_{n},y_{n})\\
  k_2=f(x_{n}+\cfrac{1}{2}h,y_{n}+\cfrac{1}{2}hk_{1})\\
  k_3=f(x_{n}+\cfrac{3}{4}h,y_{n}+\cfrac{3}{4}hk_{2})\\
  y_{n+1}=y_{n}+\cfrac{1}{9}h(2k_{1}+3k_{2}+4k_{3})\\
  \end{array}
  
Third order TVD Runge-Kutta method  

.. math::
  \begin{array}{l}
  u^{(1)}=u^{n}+\Delta tL(u^{n})\\
  u^{(2)}=\cfrac{3}{4}u^{n}+\cfrac{1}{4}u^{(1)}+\cfrac{1}{4}\Delta tL(u^{(1)})\\
  u^{n+1}=\cfrac{1}{3}u^{n}+\cfrac{2}{3}u^{(2)}+\cfrac{2}{3}\Delta tL(u^{(2)})\\
  \end{array}
  
Let us split the interval :math:`[x_{0}, x_{*}]` into :math:`n` equal segments of length :math:`h = (x_{*} − x_{0})/n`. Let
:math:`y_{1}, . . . , y_{n}` denote the approximate values of the function :math:`y(x)` at the partitioning points
:math:`x_{1}, . . . , x_{n} = x_{*}`. The discrete set of points :math:`X_{h} = \{ x_{0}, x_{1}, \dots, x_{n}\}` is called a mesh, the
individual points :math:`x_{k}` are mesh nodes, and :math:`h` is a mesh increment or step size. 

.. math::
  x_{k} = x_{0} + kh

  
Heat Equation

.. math::
  \begin{array}{l}
  \cfrac{\partial u}{ \partial t}=\alpha \cfrac{\partial ^{2}u}{ \partial x^{2}}=f(t,u)=g(u)\\
  u\sim y\rightarrow \cfrac{\partial y}{ \partial t}=\alpha \cfrac{\partial ^{2}y}{ \partial x^{2}}=f(t,y)=g(y)\\
  \end{array} 
  
Third-order Runge-Kutta version1:
 
.. math::
  \begin{array}{l}
  h=\Delta t\\
  \displaystyle k_{1}=f(t_{n},u_{n})=\alpha \cfrac{\partial ^{2}u}{\partial x^{2}}\Bigg|_{(t_{n},u_{n})} =L(u_{n})\\
  \displaystyle k_{2}=f(t_{n}+\frac{1}{2}h,u_{n}+\frac{1}{2}hk_{1})=\alpha \cfrac{\partial ^{2}u}{\partial x^{2}}\Bigg|_{(t_{n}+\frac{1}{2}h,u_{n}+\frac{1}{2}hk_{1})} =L(u_{n}+\frac{1}{2}hk_{1})\\
  \displaystyle k_{3}=f(t_{n}+h,u_{n}+h(-k_{1}+2k_{2}))=\alpha \cfrac{\partial ^{2}u}{\partial x^{2}}\Bigg|_{(t_{n}+h,u_{n}+h(-k_{1}+2k_{2}))} =L(u_{n}+h(-k_{1}+2k_{2}))\\
  \displaystyle u_{n+1}=u_{n}+\frac{1}{6}h(k_{1}+4k_{2}+k_{3})
  \end{array}
  
Specifically

.. math::
  \begin{array}{l}
  h=\Delta t\\
  \displaystyle k_{1}=\alpha \cfrac{u^{n}_{i+1}-2u^{n}_{i}+u^{n}_{i-1}}{\Delta x^{2}}=L(u_{n})\\
  u^{(1)}_i=u_{n}+\frac{1}{2}hk_{1}=u_{n}+\frac{1}{2}\Delta tL(u_{n})\\
  \displaystyle k_{2}=\alpha \cfrac{u^{(1)}_{i+1}-2u^{(1)}_{i}+u^{(1)}_{i-1}}{\Delta x^{2}}=L(u_{n}+\frac{1}{2}hk_{1})=L(u^{(1)})\\
  u^{(2)}_i=u_{n}+h(-k_{1}+2k_{2})\\
  \displaystyle k_{3}=\alpha \cfrac{u^{(2)}_{i+1}-2u^{(2)}_{i}+u^{(2)}_{i-1}}{\Delta x^{2}} =L(u^{(2)})\\
  \displaystyle u_{n+1}=u_{n}+\frac{1}{6}h(k_{1}+4k_{2}+k_{3})
  \end{array}  
  
- 
 
.. math::
  \begin{array}{l}
  h=\Delta t\\
  \displaystyle \hat{k}_{1}=hk_{1}=\alpha \Delta t\cfrac{u^{n}_{i+1}-2u^{n}_{i}+u^{n}_{i-1}}{\Delta x^{2}}=\Delta tL(u_{n})\\
  u^{(1)}_i=u_{n}+\frac{1}{2}\hat{k}_{1}=u_{n}+\frac{1}{2}\Delta tL(u_{n})\\
  \displaystyle \hat{k}_{2}=hk_{2}=\alpha \Delta t\cfrac{u^{(1)}_{i+1}-2u^{(1)}_{i}+u^{(1)}_{i-1}}{\Delta x^{2}}=\Delta tL(u_{n}+\frac{1}{2}hk_{1})=\Delta tL(u^{(1)})\\
  u^{(2)}_i=u_{n}+h(-k_{1}+2k_{2})=u_{n}+(-\hat{k}_{1}+2\hat{k}_{2})\\
  \displaystyle \hat{k}_{3}=hk_{3}=\alpha \Delta t\cfrac{u^{(2)}_{i+1}-2u^{(2)}_{i}+u^{(2)}_{i-1}}{\Delta x^{2}} =\Delta tL(u^{(2)})\\
  \displaystyle u_{n+1}=u_{n}+\frac{1}{6}(\hat{k}_{1}+4\hat{k}_{2}+\hat{k}_{3})
  \end{array}  
  
Third-order Runge-Kutta version2:

.. math::
  \begin{array}{l}
  h=\Delta t\\
  \displaystyle \hat{k}_{1}=hf(t_{n},u_{n})=\alpha \Delta t\cfrac{\partial ^{2}u}{\partial x^{2}}\Bigg|_{(t_{n},u_{n})} =\Delta tL(u_{n})\\
  \displaystyle \hat{k}_{2}=hf(t_{n}+\frac{1}{3}h,u_{n}+\frac{1}{3}\hat{k}_{1})=\alpha\Delta t\cfrac{\partial ^{2}u}{\partial x^{2}}\Bigg|_{(t_{n}+\frac{1}{3}h,u_{n}+\frac{1}{3}\hat{k}_{1})} =\Delta tL(u_{n}+\frac{1}{3}\hat{k}_{1})\\
  \displaystyle \hat{k}_{3}=hf(t_{n}+\frac{2}{3}h,u_{n}+\frac{2}{3}\hat{k}_{2})=\alpha\Delta t\cfrac{\partial ^{2}u}{\partial x^{2}}\Bigg|_{(t_{n}+\frac{2}{3}h,u_{n}+\frac{2}{3}\hat{k}_{2})} =\Delta tL(u_{n}+\frac{2}{3}\hat{k}_{2})\\
  \displaystyle u_{n+1}=u_{n}+\frac{1}{4}(\hat{k}_{1}+3\hat{k}_{3})
  \end{array}
  
-
  
.. math::
  \begin{array}{l}
  h=\Delta t\\
  \displaystyle \hat{k}_{1}=hk_{1}=\alpha \Delta t\cfrac{u^{n}_{i+1}-2u^{n}_{i}+u^{n}_{i-1}}{\Delta x^{2}}=\Delta tL(u_{n})\\
  u^{(1)}_i=u_{n}+\frac{1}{3}\hat{k}_{1}=u_{n}+\frac{1}{3}\Delta tL(u_{n})\\
  \displaystyle \hat{k}_{2}=hk_{2}=\alpha \Delta t\cfrac{u^{(1)}_{i+1}-2u^{(1)}_{i}+u^{(1)}_{i-1}}{\Delta x^{2}}=\Delta tL(u_{n}+\frac{1}{3}hk_{1})=\Delta tL(u^{(1)})\\
  u^{(2)}_i=u_{n}+\frac{2}{3}\hat{k}_{2}\\
  \displaystyle \hat{k}_{3}=hk_{3}=\alpha \Delta t\cfrac{u^{(2)}_{i+1}-2u^{(2)}_{i}+u^{(2)}_{i-1}}{\Delta x^{2}} =\Delta tL(u^{(2)})\\
  \displaystyle u_{n+1}=u_{n}+\frac{1}{4}(\hat{k}_{1}+3\hat{k}_{3})
  \end{array}  
  
Third-order Runge-Kutta version3(Ralston formula):  

.. math::
  \begin{array}{l}
  h=\Delta t\\
  \displaystyle \hat{k}_{1}=hf(t_{n},u_{n})=\alpha \Delta t\cfrac{\partial ^{2}u}{\partial x^{2}}\Bigg|_{(t_{n},u_{n})} =\Delta tL(u_{n})\\
  \displaystyle \hat{k}_{2}=hf(t_{n}+\frac{1}{2}h,u_{n}+\frac{1}{2}\hat{k}_{1})=\alpha\Delta t\cfrac{\partial ^{2}u}{\partial x^{2}}\Bigg|_{(t_{n}+\frac{1}{2}h,u_{n}+\frac{1}{2}\hat{k}_{1})} =\Delta tL(u_{n}+\frac{1}{2}\hat{k}_{1})\\
  \displaystyle \hat{k}_{3}=hf(t_{n}+\frac{3}{4}h,u_{n}+\frac{3}{4}\hat{k}_{2})=\alpha\Delta t\cfrac{\partial ^{2}u}{\partial x^{2}}\Bigg|_{(t_{n}+\frac{3}{4}h,u_{n}+\frac{3}{4}\hat{k}_{2})} =\Delta tL(u_{n}+\frac{3}{4}\hat{k}_{2})\\
  \displaystyle u_{n+1}=u_{n}+\frac{1}{9}(2\hat{k}_{1}+3\hat{k}_{2}+4\hat{k}_{3})
  \end{array}
  
-
  
.. math::
  \begin{array}{l}
  h=\Delta t\\
  \displaystyle \hat{k}_{1}=hk_{1}=\alpha \Delta t\cfrac{u^{n}_{i+1}-2u^{n}_{i}+u^{n}_{i-1}}{\Delta x^{2}}=\Delta tL(u_{n})\\
  u^{(1)}_i=u_{n}+\frac{1}{2}\hat{k}_{1}=u_{n}+\frac{1}{2}\Delta tL(u_{n})\\
  \displaystyle \hat{k}_{2}=hk_{2}=\alpha \Delta t\cfrac{u^{(1)}_{i+1}-2u^{(1)}_{i}+u^{(1)}_{i-1}}{\Delta x^{2}}=\Delta tL(u_{n}+\frac{1}{2}hk_{1})=\Delta tL(u^{(1)})\\
  u^{(2)}_i=u_{n}+\frac{3}{4}\hat{k}_{2}\\
  \displaystyle \hat{k}_{3}=hk_{3}=\alpha \Delta t\cfrac{u^{(2)}_{i+1}-2u^{(2)}_{i}+u^{(2)}_{i-1}}{\Delta x^{2}} =\Delta tL(u^{(2)})\\
  \displaystyle u_{n+1}=u_{n}+\frac{1}{9}(2\hat{k}_{1}+3\hat{k}_{2}+4\hat{k}_{3})
  \end{array} 
  
Third order TVD Runge-Kutta method

.. math::
  \begin{array}{l}
  \hat{k}_{1}=\alpha\Delta t\cfrac{u_{i+1}^{(n)}-2 u_{i}^{(n)}+u_{i-1}^{(n)}}{\Delta x^{2}}\\
  u_{i}^{(1)} = u_{i}^{(n)}+\hat{k}_{1}\\
  \hat{k}_{2}=\alpha\Delta t\cfrac{u_{i+1}^{(1)}-2 u_{i}^{(1)}+u_{i-1}^{(1)}}{\Delta x^{2}}\\
  u_{i}^{(2)} = u_{i}^{(n)}+\frac{1}{4} \hat{k}_{1}+\frac{1}{4}\hat{k}_{2} \\
  \hat{k}_{3}=\alpha\Delta t\cfrac{u_{i+1}^{(2)}-2 u_{i}^{(2)}+u_{i-1}^{(2)}}{\Delta x^{2}}\\
  u_{i}^{(n+1)} = u_{i}^{(n)}+\frac{1}{6} (\hat{k}_{1}+\hat{k}_{2}+4\hat{k}_{3})\
  \end{array}  
  
Equivalent to

.. math::
  \begin{align}
  u_{i}^{(1)} & = u_{i}^{(n)}+\frac{\alpha \Delta t}{\Delta x^{2}}\left(u_{i+1}^{(n)}-2 u_{i}^{(n)}+u_{i-1}^{(n)}\right),\\
  u_{i}^{(2)}  & = \frac{3}{4} u_{i}^{(n)}+\frac{1}{4} u_{i}^{(1)}+\frac{1}{4}\frac{\alpha \Delta t}{ \Delta x^{2}}\left(u_{i+1}^{(1)}-2 u_{i}^{(1)}+u_{i-1}^{(1)}\right) \\
  u_{i}^{(n+1)}  & = \frac{1}{3} u_{i}^{(n)}+\frac{2}{3} u_{i}^{(2)}+\frac{2}{3}\frac{\alpha \Delta t}{\Delta x^{2}}\left(u_{i+1}^{(2)}-2 u_{i}^{(2)}+u_{i-1}^{(2)}\right) .
  \end{align}
  
-
  
.. math::
  \begin{array}{l}
  u^{(1)}=u^{n}+\Delta tL(u^{n})\\
  u^{(2)}=\cfrac{3}{4}u^{n}+\cfrac{1}{4}u^{(1)}+\cfrac{1}{4}\Delta tL(u^{(1)})\\
  u^{n+1}=\cfrac{1}{3}u^{n}+\cfrac{2}{3}u^{(2)}+\cfrac{2}{3}\Delta tL(u^{(2)})\\
  \end{array}  
  
Heat Equation
----------------------
The one-dimensional heat equation is given as

.. math::
  \cfrac{\partial u}{ \partial t}=\alpha \cfrac{\partial ^{2}u}{ \partial x^{2}}

where :math:`u` is the field variable, :math:`t` is the time variable, and :math:`\alpha` is the diffusivity of the medium. The heat
equation describes the evolution of the field variable over time in a medium.

Forward Time Central Space (FTCS) Scheme
-------------------------------------------

.. math::
  \frac{u_{i}^{(n+1)}-u_{i}^{(n)}}{\Delta t}=\alpha \frac{u_{i+1}^{(n)}-2 u_{i}^{(n)}+u_{i-1}^{(n)}}{\Delta x^{2}},
  
we can re-write the above equation as an explicit update formula  

.. math::
  u_{i}^{(n+1)}=u_{i}^{(n)}+\alpha \cfrac{\Delta t}{\Delta x^{2}}({u_{i+1}^{(n)}-2 u_{i}^{(n)}+u_{i-1}^{(n)}})
  
We use the computational domain :math:`x\in [-1,1]` and :math:`\alpha=1/\pi^{2}`. The initial condition is
:math:`u(t=0,x)=-sin(\pi x)`. The analytical solution to the one-dimensional heat equation is given by

.. math::
  u(t,x)=-e^{-t}sin(\pi x)
  
We use :math:`\Delta x=0.025` and :math:`\Delta 𝑡=0.0025` for spatial and temporal discretization.  
  
Runge-Kutta Numerical Scheme
-------------------------------------------
Runge-Kutta methods tries to improve the accuracy of temporal term by evaluating :math:`f` at intermediate points between :math:`t_n`
and :math:`t_{n+1}`. The additional steps lead to an increase in computational time, but the temporal accuracy is increased.
The time integration of the heat equation using third-order Runge-Kutta scheme is given below:

.. math::
  \begin{align}
  u_{i}^{(1)} & = u_{i}^{(n)}+\frac{\alpha \Delta t}{\Delta x^{2}}\left(u_{i+1}^{(n)}-2 u_{i}^{(n)}+u_{i-1}^{(n)}\right),\\
  u_{i}^{(2)}  & = \frac{3}{4} u_{i}^{(n)}+\frac{1}{4} u_{i}^{(1)}+\frac{1}{4}\frac{\alpha \Delta t}{ \Delta x^{2}}\left(u_{i+1}^{(1)}-2 u_{i}^{(1)}+u_{i-1}^{(1)}\right) \\
  u_{i}^{(n+1)}  & = \frac{1}{3} u_{i}^{(n)}+\frac{2}{3} u_{i}^{(2)}+\frac{2}{3}\frac{\alpha \Delta t}{\Delta x^{2}}\left(u_{i+1}^{(2)}-2 u_{i}^{(2)}+u_{i-1}^{(2)}\right) .
  \end{align}
  
Crank–Nicolson method  
-------------------------------------------
`Crank–Nicolson method <https://en.wikipedia.org/wiki/Crank%E2%80%93Nicolson_method/>`_

The Crank–Nicolson method is based on the trapezoidal rule, giving second-order convergence in time. 
For example, in one dimension, suppose the partial differential equation is

.. math::
  \frac{\partial u}{\partial t}=F\left(u, x, t, \frac{\partial u}{\partial x}, \frac{\partial^{2} u}{\partial x^{2}}\right) .

Letting :math:`u(i\Delta x, n\Delta t)=u^{n}_{i}` and :math:`F^{n}_{i}=F` evaluated for :math:`i`, :math:`n` and :math:`u^{n}_{i}`,
the equation for Crank-Nicolson method is a combination of the forward Euler method at :math:`n` and the backward Euler method at 
:math:`n+1`

.. math::
  \begin{array}{|l|l|}
  \hline \frac{u_{i}^{n+1}-u_{i}^{n}}{\Delta t}=F_{i}^{n}\left(u, x, t, \frac{\partial u}{\partial x}, \frac{\partial^{2} u}{\partial x^{2}}\right) & \text { forward Euler } \\
  \hline \frac{u_{i}^{n+1}-u_{i}^{n}}{\Delta t}=F_{i}^{n+1}\left(u, x, t, \frac{\partial u}{\partial x}, \frac{\partial^{2} u}{\partial x^{2}}\right) & \text { backward Euler } \\
  \hline \frac{u_{i}^{n+1}-u_{i}^{n}}{\Delta t}=\frac{1}{2}\left[F_{i}^{n+1}\left(u, x, t, \frac{\partial u}{\partial x}, \frac{\partial^{2} u}{\partial x^{2}}\right)+F_{i}^{n}\left(u, x, t, \frac{\partial u}{\partial x}, \frac{\partial^{2} u}{\partial x^{2}}\right)\right] & \text { Crank-Nicolson } \\
  \hline
  \end{array}
  
Note that this is an implicit method: to get the "next" value of u in time, a system of algebraic equations must be solved. If the partial differential equation is nonlinear, the discretization will also be nonlinear, so that advancing in time will involve the solution of a system of nonlinear algebraic equations, though linearizations are possible. In many problems, especially linear diffusion, the algebraic problem is tridiagonal and may be efficiently solved with the tridiagonal matrix algorithm.  

Example: 1D diffusion
-----------------------------
The Crank–Nicolson method is often applied to diffusion problems. As an example, for linear diffusion,

.. math::
  \cfrac{\partial u}{ \partial t}=\alpha \cfrac{\partial ^{2}u}{ \partial x^{2}}

applying a finite difference spatial discretization for the right-hand side, the Crank–Nicolson discretization is then

.. math::
  \cfrac{u^{n+1}_{i}-u^{n}_{i}}{\Delta t}=\cfrac{1}{2}\cfrac{\alpha}{\Delta x^{2}}
  \left[(u^{n+1}_{i+1}-2u^{n+1}_{i}+u^{n+1}_{i-1})+(u^{n}_{i+1}-2u^{n}_{i}+u^{n}_{i-1})\right]
  
or, letting :math:`r=\cfrac{1}{2}\cfrac{\alpha\Delta t}{\Delta x^{2}}`,

.. math::
  -ru^{n+1}_{i+1}+(1+2r)u^{n+1}_{i}-ru^{n+1}_{i-1}=ru^{n}_{i+1}+(1-2r)u^{n}_{i}+ru^{n}_{i-1}
  
-
  
.. math::
  -ru^{n+1}_{i-1}+(1+2r)u^{n+1}_{i}-ru^{n+1}_{i+1}=ru^{n}_{i-1}+(1-2r)u^{n}_{i}+ru^{n}_{i+1}  
  
-
  
.. math::
  \begin{array}{l}
  1:-ru^{n+1}_{0}+(1+2r)u^{n+1}_{1}-ru^{n+1}_{2}=d_{1}\\
  2:-ru^{n+1}_{1}+(1+2r)u^{n+1}_{2}-ru^{n+1}_{3}=d_{2}\\
  3:-ru^{n+1}_{2}+(1+2r)u^{n+1}_{3}-ru^{n+1}_{4}=d_{3}\\
  \cdots \\
  i:-ru^{n+1}_{i-1}+(1+2r)u^{n+1}_{i}-ru^{n+1}_{i+1}=d_{i}\\
  \cdots \\
  N-2:-ru^{n+1}_{N-3}+(1+2r)u^{n+1}_{N-2}-ru^{n+1}_{N-1}=d_{N-2}\\
  N-1:-ru^{n+1}_{N-2}+(1+2r)u^{n+1}_{N-1}-ru^{n+1}_{N}=d_{N-1}\\
  \end{array}
  
-
  
.. math::
  d_{i}=ru^{n}_{i-1}+(1-2r)u^{n}_{i}+ru^{n}_{i+1}    
  
We can rewrite this as

.. math::
  \begin{array}{l}
  1:(1+2r)u^{n+1}_{1}-ru^{n+1}_{2}=d_{1}+ru^{n+1}_{0}\\
  2:-ru^{n+1}_{1}+(1+2r)u^{n+1}_{2}-ru^{n+1}_{3}=d_{2}\\
  3:-ru^{n+1}_{2}+(1+2r)u^{n+1}_{3}-ru^{n+1}_{4}=d_{3}\\
  \cdots \\
  i:-ru^{n+1}_{i-1}+(1+2r)u^{n+1}_{i}-ru^{n+1}_{i+1}=d_{i}\\
  \cdots \\
  N-2:-ru^{n+1}_{N-3}+(1+2r)u^{n+1}_{N-2}-ru^{n+1}_{N-1}=d_{N-2}\\
  N-1:-ru^{n+1}_{N-2}+(1+2r)u^{n+1}_{N-1}=d_{N-1}+ru^{n+1}_{N}\\
  \end{array}
  
  
An illustration of a tridiagonal system is given in the following Equation.
  
.. math::
  \begin{bmatrix}
  b_{1}&c_{1}  &0&\cdots &0 \\
  a_{2}&b_{2}&c_{2}  &\cdots &0 \\
  \vdots&\vdots&  & &\vdots \\
  0&\cdots&a_{N-2}  &b_{N-2} &c_{N-2} \\
  0&0&\cdots  &a_{N-1} &b_{N-1} \\
  \end{bmatrix}
  \begin{bmatrix}
  u_{1}\\u_{2}\\\vdots \\u_{N-2}\\u_{N-1}
  \end{bmatrix}
  =\begin{bmatrix}
  \hat{d}_{1}\\ \hat{d}_{2}\\ \vdots \\ \hat{d}_{N-2}\\ \hat{d}_{N-1}
  \end{bmatrix}  
  
- 

.. math::
  \begin{bmatrix}
  1+2r&-r  &0&\cdots &0 \\
  -r&1+2r&-r  &\cdots &0 \\
  \vdots&\vdots&  & &\vdots \\
  0&\cdots&-r  &1+2r &-r \\
  0&0&\cdots  &-r &1+2r \\
  \end{bmatrix}
  \begin{bmatrix}
  u_{1}\\u_{2}\\\vdots \\u_{N-2}\\u_{N-1}
  \end{bmatrix}
  =\begin{bmatrix}
  \hat{d}_{1}\\ \hat{d}_{2}\\ \vdots \\ \hat{d}_{N-2}\\ \hat{d}_{N-1}
  \end{bmatrix}    
  
- 

.. math::
  \begin{array}{l}
  a_{1}=0,b_{1}=1+2r,c_{1}=-r\\
  a_{2}=-r,b_{2}=1+2r,c_{2}=-r\\
  a_{3}=-r,b_{3}=1+2r,c_{3}=-r\\
  \cdots\\
  a_{i}=-r,b_{i}=1+2r,c_{i}=-r\\
  \cdots\\
  a_{N-2}=-r,b_{N-2}=1+2r,c_{N-2}=-r\\
  a_{N-1}=-r,b_{N-1}=1+2r,c_{N-1}=0\\
  \end{array}
  
- 

.. math::
  \begin{bmatrix}
  \hat{d}_{1}\\ \hat{d}_{2}\\ \vdots \\ \hat{d}_{N-2}\\ \hat{d}_{N-1}
  \end{bmatrix}   =\begin{bmatrix}
  {d}_{1}+ru^{n+1}_{0}\\ {d}_{2}\\ \vdots \\ {d}_{N-2}\\ {d}_{N-1}+ru^{n+1}_{N}
  \end{bmatrix} =\begin{bmatrix}
  r{u}^{n}_{0}+(1-2r){u}^{n}_{1}+r{u}^{n}_{2}+ru^{n+1}_{0}\\
  r{u}^{n}_{1}+(1-2r){u}^{n}_{2}+r{u}^{n}_{3}\\
  \vdots \\
  r{u}^{n}_{N-3}+(1-2r){u}^{n}_{N-2}+r{u}^{n}_{N-1}\\
  r{u}^{n}_{N-2}+(1-2r){u}^{n}_{N-1}+r{u}^{n}_{N}+ru^{n+1}_{N}
  \end{bmatrix} 
  
- 

.. math::
  \begin{bmatrix}
  {a}_{1}\\ {a}_{2}\\ \vdots \\ {a}_{N-2}\\ {a}_{N-1}
  \end{bmatrix}   =
  \begin{bmatrix}
  {a}[0]\\ {a}[1]\\ \vdots \\ {a}[N-3]\\ {a}[N-2]
  \end{bmatrix}  =
  \begin{bmatrix}
  0\\ -r\\ \vdots \\ -r\\ -r
  \end{bmatrix}
  
- 

.. math::
  \begin{bmatrix}
  {b}_{1}\\ {b}_{2}\\ \vdots \\ {b}_{N-2}\\ {b}_{N-1}
  \end{bmatrix}   =
  \begin{bmatrix}
  {b}[0]\\ {b}[1]\\ \vdots \\ {b}[N-3]\\ {b}[N-2]
  \end{bmatrix}  =
  \begin{bmatrix}
  1+2r\\ 1+2r\\ \vdots \\ 1+2r\\ 1+2r
  \end{bmatrix}   
  
- 

.. math::
  \begin{bmatrix}
  {c}_{1}\\ {c}_{2}\\ \vdots \\ {c}_{N-2}\\ {c}_{N-1}
  \end{bmatrix}   =
  \begin{bmatrix}
  {c}[0]\\ {c}[1]\\ \vdots \\ {c}[N-3]\\ {c}[N-2]
  \end{bmatrix}  =
  \begin{bmatrix}
  -r\\ -r\\ \vdots \\ -r\\ 0
  \end{bmatrix}   

The Thomas algorithm used for solving the tridiagonal matrix is ：

.. math::
  \begin{array}{l}
  1:\text{Given a,b,c,d}\\
  2:\text{Allocate q}\quad\quad\diamondsuit \text{Storage of superdiagonal array }\\
  3:u_1=d_1/b_{1}\\
  4:\text{ for i=2 to N do}\quad\quad\diamondsuit\text{Forward elimination }\\
  5:\quad q_{i}=c_{i-1}/b_{i-1}\\
  6:\quad b_{i}=b_{i}-q_{i}a_{i}\\
  7:\quad u_{i}=(d_{i}-a_{i}u_{i-1})/b_{i}\\
  8:\text{end for}\\
  9:\text{ for i=N-1 to 1 do}\\
  10:\quad u_{i}=(u_{i}-q_{i+1}u_{i+1})\quad\quad\diamondsuit\text{Backward substitution }\\
  11:\text{end for}\\
  \end{array}
  
Matrix Configuration  

Tri-diagonal systems for :math:`nx+1` unknowns may be written as:

.. math::
  a_{i}u_{i-1}+b_{i}u_{i}+c_{i}u_{i+1}=d_{i}
  
Boundary points: :math:`(1,nx+1)`, inner points: :math:`(2,3,\cdots,nx-1,nx)`
  
We know the values at the boundaries (:math:`B`):
 
.. math::
  \begin{align}
  u_{1} & = B_{1}\\
  u_{nx+1} & = B_{nx+1}\\
  \end{align}
  
the coefficient at the boundaries (:math:`B`):  

.. math::
  \begin{align}
  a_{1} & = 0\\
  b_{1} & = 1\\
  c_{1} & = 0\\
  a_{nx+1} & = 0\\
  b_{nx+1} & = 1\\
  c_{nx+1} & = 0\\
  \end{align}

-

.. math::
  \begin{array}{l}
  a_{1}u_{0}+b_{1}u_{1}+c_{1}u_{2}&=0u_{0}+u_{1}+0u_{2} = u_{1}=B_{1}\\
  a_{nx+1}u_{nx}+b_{nx+1}u_{nx+1}+c_{nx+1}u_{nx+2}&=0u_{nx}+u_{nx+1}+0u_{nx+2}  = u_{nx+1}=B_{nx+1}\\
  \end{array}  
  
So the matrix looks like this, with known coefficients :math:`a,b,c,d`. The vector :math:`u` is unknown.  

.. math::
  \left[\begin{array}{cccccc}
  1 & 0 & 0 & \cdots & & 0 \\
  a_{2} & b_{2} & c_{2} & & & \\
  0 & a_{3} & b_{3} & c_{3} & & \\
  \vdots & & \ddots & \ddots & \ddots & \vdots \\
  & & a_{n x-1} & b_{n x-1} & c_{n x-1} & 0 \\
  0 & & & a_{n x} & b_{n x} & c_{n x} \\
  & & \cdots & 0 & 0 & 1
  \end{array}\right]\left[\begin{array}{c}
  u_{1} \\
  u_{2} \\
  u_{3} \\
  \vdots \\
  u_{n x-1} \\
  u_{n x} \\
  u_{n x+1}
  \end{array}\right]=\left[\begin{array}{c}
  B_{1} \\
  d_{2} \\
  d_{3} \\
  \vdots \\
  d_{n x-1} \\
  d_{n x} \\
  B_{n x+1}
  \end{array}\right]
  
Subscripts count from zero  

.. math::
  \left[\begin{array}{cccccc}
  1 & 0 & 0 & \cdots & & 0 \\
  a_{1} & b_{1} & c_{1} & & & \\
  0 & a_{2} & b_{2} & c_{2} & & \\
  \vdots & & \ddots & \ddots & \ddots & \vdots \\
  & & a_{n x-2} & b_{n x-2} & c_{n x-2} & 0 \\
  0 & & & a_{n x-1} & b_{n x-1} & c_{n x-1} \\
  & & \cdots & 0 & 0 & 1
  \end{array}\right]\left[\begin{array}{c}
  u_{0} \\
  u_{1} \\
  u_{2} \\
  \vdots \\
  u_{n x-2} \\
  u_{n x-1} \\
  u_{n x}
  \end{array}\right]=\left[\begin{array}{c}
  B_{0} \\
  d_{1} \\
  d_{2} \\
  \vdots \\
  d_{n x-2} \\
  d_{n x-1} \\
  B_{n x}
  \end{array}\right]

-
  
.. math::
  \left[\begin{array}{cccccc}
  b_{0} & c_{0} & 0 & \cdots & & 0 \\
  a_{1} & b_{1} & c_{1} & & & \\
  0 & a_{2} & b_{2} & c_{2} & & \\
  \vdots & & \ddots & \ddots & \ddots & \vdots \\
  & & a_{n x-2} & b_{n x-2} & c_{n x-2} & 0 \\
  0 & & & a_{n x-1} & b_{n x-1} & c_{n x-1} \\
  & & \cdots & 0 & a_{n x} & b_{n x}
  \end{array}\right]\left[\begin{array}{c}
  u_{0} \\
  u_{1} \\
  u_{2} \\
  \vdots \\
  u_{n x-2} \\
  u_{n x-1} \\
  u_{n x}
  \end{array}\right]=\left[\begin{array}{c}
  B_{0} \\
  d_{1} \\
  d_{2} \\
  \vdots \\
  d_{n x-2} \\
  d_{n x-1} \\
  B_{n x}
  \end{array}\right]

-

.. math::
  a_{1} = 0,\quad b_{1}  = 1, \quad c_{1}= 0
 
-

.. math::
  a_{nx+1} = 0,\quad b_{nx+1}=1,\quad c_{nx+1} = 0
    
  
#. 1D heat equation: Forward time central space (FTCS) scheme
#. 1D heat equation: Runge-Kutta Numerical Scheme
